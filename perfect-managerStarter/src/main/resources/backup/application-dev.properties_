# tomcat设置
#嵌入tomcat配置
server.port=8088
server.servlet.context-path=/perfect-manager
spring.devtools.restart.enabled=true
##和CPU数
#spring.server.acceptorThreadCount=4
#spring.server.minSpareThreads=50
#spring.server.maxSpareThreads=50
#spring.server.maxThreads=1000
#spring.server.maxConnections=2000
##10秒超时
#spring.server.connectionTimeout=10000
#spring.server.protocol=org.apache.coyote.http11.Http11Nio2Protocol
#spring.server.redirectPort=443
#spring.server.compression=on
##文件请求大小
#spring.server.MaxFileSize=300MB
#spring.server.MaxRequestSize=500MB
#日志路径
log.path=D:/spring_log/finance
# 数据库访问配置
# 主数据源，默认的
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.druid.url=jdbc:mysql://localhost:3306/business?tinyInt1isBit=true&useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false&&allowPublicKeyRetrieval=true&serverTimezone=serverTimezone=Asia/Shanghai
spring.datasource.druid.username=root
spring.datasource.druid.password=1q2w3e4r

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.druid.initialSize=5
spring.datasource.druid.minIdle=5
spring.datasource.druid.maxActive=30
# 配置获取连接等待超时的时间
spring.datasource.druid.maxWait=500
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.minEvictableIdleTimeMillis=300000
spring.datasource.druid.validationQuery=SELECT 1 
spring.datasource.druid.testWhileIdle=true
spring.datasource.druid.testOnBorrow=false
spring.datasource.druid.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.poolPreparedStatements=true
spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.useGlobalDataSourceStat=true

#-----------------------REDIS设置---------------------------
#REDIS设置
# Redis数据库索引（默认为0）
spring.redis.database=1
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码
spring.redis.password=
# 连接超时时间（毫秒）
spring.redis.timeout=5000
spring.redis.commandtimeout=3000

# 连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=8
# 连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=-1
# 连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=0
#-----------------------spring session----------------------------
# session保存在cookie总的key
server.servlet.session.cookie.name=PERFECT_SESSION
# session超时时间，单位为秒，30分钟：1800
server.servlet.session.timeout=1800
spring.session.store-type=redis
spring.session.redis.flush-mode=ON_SAVE
spring.session.redis.namespace=PERFECT_SESSION_REDIS_KEY
#-----------------------DEVTOOLS (DevToolsProperties)---------
spring.devtools.livereload.port=35730
#-----------------------RestTemplateConfiguration---------
RestTemplate-ConnectTimeout=150000
RestTemplate-ReadTimeout=150000

#-----------------------mybatis-plus 设置---------
mybatis-plus.mapper-locations=classpath:/mapper/*Mapper # mapper 文件路径
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
mybatis-plus.global-config.db-config.id-type=AUTO
mybatis-plus.global-config.db-config.insertStrategy=ignored
mybatis-plus.global-config.db-config.update-strategy=ignored
mybatis-plus.configuration.jdbc-type-for-null=NULL
# 关闭驼峰
mybatis-plus.configuration.map-underscore-to-camel-case=false
#-----------------------Perfect  Configuration---------
# 错误日志输出简单模式
perfect.config.simple-model=true
perfect.config.log-save-db=true
perfect.config.log-print=true
perfect.config.open-aop-log=true
# 文件上传路径
perfect.config.fs-url=http://127.0.0.1:9091/perfect-fs/api/v1/file/upload
perfect.config.fs-appid=0
perfect.config.fs-username=PERFECT
perfect.config.fs-groupid=ONE

# multipart 上传配置            #
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=1024MB
spring.servlet.multipart.max-request-size=1024MB
spring.mvc.dispatch-options-request=true
#-----------------------Perfect Security Configuration---------
# AOP记录用户操作日志，true开启，false关闭
perfect.open-aop-log=true
# 开发者模式，可以跳过验证码
perfect.security.develop-model=true
# session过期后自动获取
perfect.security.create-new-session=false
# 登录路径
perfect.security.login-url=/login
# 登出路径
perfect.security.logout-url=/api/v1/logout
# 首页路径
perfect.security.index-url=/index
# 免认证静态资源路径
perfect.security.anon-resources-url=/css/**,/js/**,/fonts/**,/img/**
# 记住我有效时间，单位为秒
perfect.security.remember-me-timeout=3600
# 验证码相关配置，图形验证码由字符位数
perfect.security.code.image.length=4
# 验证码相关配置，图形验证码图片长度，单位 px
perfect.security.code.image.width=148
# 验证码相关配置，图形验证码高度，单位 px
perfect.security.code.image.height=36
# 验证码相关配置，图形验证码失效时间
perfect.security.code.image.expire-in=60
# 验证码相关配置，以下资源需要验证图形验证码
perfect.security.code.image.url=/test/img/code
# 验证码相关配置，以下资源需要验证图形验证码，生成图形验证码的请求 url
perfect.security.code.image.create-url=/image/code
# 验证码相关配置，以下资源需要验证图形验证码，对应图形验证码登录页面 form表单的 action属性
perfect.security.code.image.login-processing-url=/api/v1/user/token/get
# 验证码相关配置，短信验证码相关配置，短信验证码字符位数
perfect.security.code.sms.length=4
# 验证码相关配置，短信验证码相关配置，短信验证码的有效时间，单位为秒
perfect.security.code.sms.expire-in=120
# 验证码相关配置，短信验证码相关配置，以下资源需要短信验证码验证
perfect.security.code.sms.url=/mobile/bind,/mobile/unbind,/test/sms/code
# 验证码相关配置，短信验证码相关配置，以下资源需要短信验证码验证，生成短信验证码的请求 url
perfect.security.code.sms.create-url=/sms/code
# 验证码相关配置，短信验证码相关配置，以下资源需要短信验证码验证，对应短信验证码登录页面 form表单的 action属性
perfect.security.code.sms.login-processing-url=/mobile/login

# 同一个账号最大并发登录数量，超出这个数量后，后者踢掉前者
perfect.security.session.maximum-sessions=1
# session最大有效时间 1800 30min
#DEFAULT_MAX_INACTIVE_INTERVAL_SECONDS=1800

#-----------------------Perfect MONGO Configuration---------
# MONGO 信息配置
spring.data.mongodb.database=${mongodb.database}
spring.data.mongodb.repositories.type=auto
spring.data.mongodb.uri=${mongodb.uri}
spring.data.mongodb.client.min-connections-per-host=3
spring.data.mongodb.client.required-replica-set-name=${mongodb.requiredReplicaSetName}
spring.data.mongodb.client.connect-timeout=15000
spring.data.mongodb.client.socket-keep-alive=true
spring.data.mongodb.client.socket-timeout=15000

